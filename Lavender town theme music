

/*
  keyboard

 Plays a pitch that changes based on a changing analog input

 circuit:
 * 3 force-sensing resistors from +5V to analog in 0 through 5
 * 3 10K resistors from analog in 0 through 5 to ground
 * 8-ohm speaker on digital pin 8

 created 21 Jan 2010
 modified 9 Apr 2012
 by Tom Igoe

This example code is in the public domain.

 http://www.arduino.cc/en/Tutorial/Tone3

 */

#include "pitches.h"

int buzzer = 9;
const int threshold = 10;    // minimum reading of the sensors that generates a note


int LavenderTownTP_themeMusic[] = {
  // This is the top part
  
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4,  // 1 MEASURE
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, 
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4,
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4,
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4,
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4,
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4,

NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, // 8 MEASURE
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, // 9 MEASURE
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, // 10 MEASURE
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4,    // 11 MEASURE 
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, // 12 MEASURE
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, // 13 MEASURE
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, // 14 MEASURE

NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, //15 MEASURE
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, // 16 MEASURE
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, // 17 MEASURE
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4,  // 18 MEASURE
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, // 19 MEASURE
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, // 20 MEASURE
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, // 21 MEASURE

NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, // 22 MEASURE

NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, // 23 MEASURE
NOTE_C4, NOTE_F4, NOTE_A5, NOTE_FS4, // 24 MEASURE

};
int LavenderTownTP_tempo[] = {
4,4,4,4, // measure 1
4,4,4,4,
4,4,4,4,
4,4,4,4,
4,4,4,4,
4,4,4,4,
4,4,4,4,


4,4,4,4, // measure 8
4,4,4,4,
4,4,4,4,
4,4,4,4,
4,4,4,4,
4,4,4,4,
4,4,4,4,

4,4,4,4,  // measure 15
4,4,4,4,
4,4,4,4,
4,4,4,4,
4,4,4,4,
4,4,4,4,
4,4,4,4,

4,4,4,4,
4,4,4,4,
4,4,4,4


};
int LavenderTownBM[] = {
  0, // 1th measure
  0, // 2th measure
  0, // 3th measure
  0, //4th measure

  NOTE_G3,NOTE_G3, // 5,measure
 NOTE_FS3,NOTE_FS3, // 6th measure
 NOTE_G3,NOTE_FS3,NOTE_E3,NOTE_B3, // 7th measure
  NOTE_ES3, NOTE_D3, NOTE_CS3, NOTE_G3, // 8th measure
  //C
  NOTE_ G3, NOTE_G3 //9th measure
  NOTE_FS3, NOTE_FS3, //10th measure
  NOTE_B3, NOTE_G3, NOTE_FS3, NOTE_B3, // 11th measure
  NOTE_E3, NOTE_D3, NOTE_C3, NOTE_E3, //12th measure

  NOTE_G3, NOTE_G3, // D 13th measure
  NOTE_FS3, NOTE_FS3, // 14th measure
 NOTE_G3, NOTE_FS3, NOTE_E3, NOTE_B3, // 15th measure
  NOTE_E3, NOTE_C3, NOTE_B2, NOTE_E3, //16th measure

  NOTE_G3, NOTE_G3, // 17measure
  NOTE_FS3, NOTE_FS3, // 18th measure
  NOTE_B3, NOTE_G3, NOTE_FS3, NOTE_B3, // 19th measure
  NOTE_C2, NOTE_C2, // 20th measure
  NOTE_E3, // 21
  NOTE_D3, //22
  NOTE_C3, //23
  NOTE_E3, NOTE_C3, NOTE_B2, NOTE_E3,//24
};

int LavenderTownBM_tempo[] = {
 1, //A
 1,
 1,
 1,

  2,2, //B
  2,2,
  4,4,4,4,
  
  4,4,2,4,

  16, 8, 16, 8, 16, 8, 16, 8, 16, 16, 8, //C
  16, 8, 16, 8, 16, 8, 16, 8, 16, 16, 8,
  16, 8, 16, 8, 16, 8, 16, 8, 16, 16, 8,
  16, 8, 16, 8, 8, 8, 8, 4,


  5.3, 5.3, 5.3, 5.3, 8, 8, //D
  5.3, 5.3, 5.3, 5.3, 8, 8,
  5.3, 5.3, 5.3, 5.3, 8, 8,
  5.3, 5.3, 8, 12, 12, 12, 8, 8,

  8, 8, 8, 8, 8, 8, 8, 8, //E
  8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8
};

void setup() {
  Serial.begin(9600);
  
}

void loop() {
  sing3();
  sing4();
 
}






void sing3()
{
  //int len = sizeof(underworld_melody);
  for (int i = 0; i < 153; i++)
  {
    int noteDuration = 1000 / LavenderTownTP_tempo[i];
    tone(buzzer, LavenderTownTP_themeMusic[i], noteDuration);

    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);

    tone(buzzer, 0, noteDuration); //stop the tone playing
  }
}
void sing4()
{
  
  for (int i = 0; i < 57; i++)
  {
    int noteDuration = 1000 / LavenderTownBM_tempo[i];

    tone(buzzer, LavenderTownBM[i], noteDuration);

    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);

    tone(buzzer, 0, noteDuration); //stop the tone playing
  }
}
