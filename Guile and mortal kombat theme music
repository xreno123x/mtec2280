

/*
  keyboard

 Plays a pitch that changes based on a changing analog input

 circuit:
 * 3 force-sensing resistors from +5V to analog in 0 through 5
 * 3 10K resistors from analog in 0 through 5 to ground
 * 8-ohm speaker on digital pin 8

 created 21 Jan 2010
 modified 9 Apr 2012
 by Tom Igoe

This example code is in the public domain.

 http://www.arduino.cc/en/Tutorial/Tone3

 */

#include "pitches.h"

int buzzer = 9;               // the location of the buzzer on the arduino
const int threshold = 10;    // minimum reading of the sensors that generates a note


int Guile_themeMusic[] = {
  
NOTE_DS4,NOTE_DS4,NOTE_D4,0,NOTE_D4,NOTE_DS4,NOTE_D4,// 1th measure
NOTE_DS4,NOTE_DS4,NOTE_D4,0,NOTE_D4,NOTE_DS4,NOTE_D4, // 2TH measure
NOTE_DS4,NOTE_D4,NOTE_DS4,0,NOTE_D4,NOTE_F4,0,NOTE_F4,NOTE_DS4,NOTE_D4,NOTE_AS3, // 3 MEASURE 

NOTE_DS4,NOTE_DS4,NOTE_D4,0,NOTE_D4,NOTE_DS4,NOTE_D4,// 4 MEASURE
NOTE_DS4,NOTE_DS4,NOTE_D4,0,NOTE_D4,NOTE_DS4,NOTE_D4, // 5 MEASURE
NOTE_DS4,NOTE_D4,NOTE_DS4,0,NOTE_D4,NOTE_F4,0,NOTE_F4,NOTE_DS4,NOTE_D4,NOTE_AS3, //6 MEASURE 

NOTE_C3,NOTE_D3,NOTE_DS3,NOTE_F3, // 7 MEASURE
NOTE_G3,NOTE_G3,NOTE_F3,NOTE_AS3,NOTE_GS3,NOTE_G3,NOTE_GS3, //8 MEASURE
NOTE_D3,NOTE_DS3,NOTE_F3,0,NOTE_AS3,NOTE_D3,NOTE_F3, // 9 MEASURE
NOTE_GS3,NOTE_AS3,NOTE_G3,0,NOTE_G3,NOTE_F3,NOTE_D3, // 10 MEASURE  

NOTE_C3,NOTE_D3,NOTE_DS3,NOTE_F3, //11 MEASURE
NOTE_G3,NOTE_G3,NOTE_GS3,NOTE_F3,0,NOTE_F3,NOTE_G3,NOTE_GS3, //12 MEASURE
NOTE_AS3,NOTE_C4,NOTE_D4,NOTE_DS4,// 13 MEASURE
NOTE_G4,NOTE_F4,NOTE_D4,NOTE_AS3,// 14 MEASURE
NOTE_C4,NOTE_D4,NOTE_DS4,NOTE_F4, // 15MEASURE  

NOTE_C4,NOTE_D4,NOTE_DS4,NOTE_F4, // 16 MEASURE
NOTE_G4,NOTE_C4,NOTE_C4,//17TH + 18TH MEASURE
NOTE_GS4,NOTE_G4,NOTE_F4,NOTE_G4, //19 MEASURE
NOTE_F4,NOTE_DS4,NOTE_D4,NOTE_AS3,// 20 MEASURE

NOTE_C4, NOTE_G3, NOTE_AS3,NOTE_AS3,  // 21+22 MEASURE
NOTE_C4, NOTE_D4, NOTE_DS4,NOTE_F4,NOTE_G4,NOTE_GS4,NOTE_F4,0,NOTE_D4,NOTE_D4,//23+24 MEASURE
NOTE_D4, NOTE_DS4,NOTE_F4,0,NOTE_AS3,NOTE_DS4,NOTE_GS4,NOTE_G4,NOTE_F4,NOTE_G4,NOTE_F4,NOTE_DS4,//25+26 measure
NOTE_C4, NOTE_D4, NOTE_DS4, NOTE_F4, //27 MEASURE 
NOTE_F4, NOTE_G4, NOTE_DS4, NOTE_D4,//28 MEASURE
NOTE_D4, NOTE_DS4,NOTE_C4,NOTE_AS3,NOTE_AS3, // 29 + 30 MEASURE
NOTE_C4,0,NOTE_D4,NOTE_DS4,NOTE_F4,NOTE_G4,NOTE_C4,NOTE_AS5,NOTE_GS4,NOTE_G4,NOTE_F4,// 31 +32 MEASURE
NOTE_D4,NOTE_DS4,NOTE_C4// 33+34 MEASURE
};
float Guile_tempo[] = {
  8,16,16,16,16,2,8, //measure 1
8,16,16,16,16,2,8,
16,8,16,16,8,16,16,16,8,8,8,

8,16,16,16,16,2,8, //measure 4
8,16,16,16,16,2,8,
16,8,16,16,8,16,16,16,8,8,8,

1.6,8,16,5.3,  //measure 7
5.3,16,8,4,8,16,5.3,
5.3,5.3,8,8,8,8,8,
5.3,5.3,8,8,8,8,8,

1.6,8,16,5.3, //measure 11
5.3,16,8,8,8,8,16,5.3,
1.6,8,16,5.3,
4,4,4,4,
1.6,8,8,8,

1.6,8,8,8,  //measure 16
0.5714,8,8,  //2 measures in one line
1.6,8,16,5.3,
4,4,4,4,
4,0.6667,8,8,
1.6,8,16,8,4,5.3,8,8,8,16,5.3,
4,5.3,16,5.3,8,8,4,16,16,4,8,8,

1.6,8,8,8,// measure 27
1.6,8,16,5.3,
8,16,0.64,8,8,
2,8,8,16,8,3.2,5.3,5.3,8,8,8,
8,16,0.5517

};
int mortalkombattheme[] = {
  NOTE_A3, NOTE_A3, NOTE_C4, NOTE_A3, NOTE_D4, NOTE_A3, NOTE_E4, NOTE_D4, //A 1th measure
  NOTE_C4, NOTE_C4, NOTE_E4, NOTE_C4, NOTE_G4, NOTE_C4, NOTE_E4, NOTE_C4, // 2th measure
  NOTE_G3, NOTE_G3, NOTE_B3, NOTE_G3, NOTE_C4, NOTE_G3, NOTE_D4, NOTE_C4, // 3th measure
  NOTE_F3, NOTE_F3, NOTE_A3, NOTE_F3, NOTE_C4, NOTE_F3, NOTE_C4, NOTE_B3, //4th measure

  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_G3, NOTE_C4, //B 5,measure
  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_G3, NOTE_E3, // 6th measure
  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_G3, NOTE_C4, // 7th measure
  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, 0, // 8th measure
  //C
  NOTE_A3, NOTE_E4, NOTE_A3, NOTE_C4, NOTE_A3, NOTE_AS3, NOTE_A3, NOTE_C4, NOTE_A3, NOTE_AS3, NOTE_G3, //9th measure
  NOTE_A3, NOTE_E4, NOTE_A3, NOTE_C4, NOTE_A3, NOTE_AS3, NOTE_A3, NOTE_C4, NOTE_A3, NOTE_AS3, NOTE_G3, //10th measure
  NOTE_A3, NOTE_E4, NOTE_A3, NOTE_C4, NOTE_A3, NOTE_AS3, NOTE_A3, NOTE_C4, NOTE_A3, NOTE_AS3, NOTE_G3, // 11th measure
  NOTE_A3, NOTE_E4, NOTE_A3, NOTE_C4, NOTE_A3, NOTE_G3, NOTE_G3, NOTE_A3, //12th measure

  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_G3, NOTE_C4, // D 13th measure
  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_G3, NOTE_E3, // 14th measure
  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_G3, NOTE_C4, // 15th measure
  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, 0, //16th measure

  NOTE_A3, NOTE_A3, NOTE_C4, NOTE_A3, NOTE_D4, NOTE_A3, NOTE_E4, NOTE_D4, //E 17measure
  NOTE_C4, NOTE_C4, NOTE_E4, NOTE_C4, NOTE_G4, NOTE_C4, NOTE_E4, NOTE_C4, // 18th measure
  NOTE_G3, NOTE_G3, NOTE_B3, NOTE_G3, NOTE_C4, NOTE_G3, NOTE_D4, NOTE_C4, // 19th measure
  NOTE_F3, NOTE_F3, NOTE_A3, NOTE_F3, NOTE_C4, NOTE_F3, NOTE_C4, NOTE_B3 // 20th measure
};

int mortalkombattheme_tempo[] = {
  8, 8, 8, 8, 8, 8, 8, 8, //A
  8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8, 

  5.3, 5.3, 5.3, 5.3, 8, 8, //B
  5.3, 5.3, 5.3, 5.3, 8, 8,
  5.3, 5.3, 5.3, 5.3, 8, 8,
  5.3, 5.3, 8, 8, 8, 8, 8, 8, 

  16, 8, 16, 8, 16, 8, 16, 8, 16, 16, 8, //C
  16, 8, 16, 8, 16, 8, 16, 8, 16, 16, 8,
  16, 8, 16, 8, 16, 8, 16, 8, 16, 16, 8,
  16, 8, 16, 8, 8, 8, 8, 4, 


  5.3, 5.3, 5.3, 5.3, 8, 8, //D
  5.3, 5.3, 5.3, 5.3, 8, 8,
  5.3, 5.3, 5.3, 5.3, 8, 8,
  5.3, 5.3, 8, 12, 12, 12, 8, 8,

  8, 8, 8, 8, 8, 8, 8, 8, //E
  8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8,
  8, 8, 8, 8, 8, 8, 8, 8
};
int wrongbuzzer[]={NOTE_A3,NOTE_A3,NOTE_A3}; // if the person got ut wrong
int wrongbuzzer_tempo[]={8,8,8};
int rightbuzzer[]={NOTE_E7,NOTE_E7,NOTE_E7}; // if the person got it right
int rightbuzzer_tempo[]={8,8,8};
void setup() {
  Serial.begin(9600);
  //sound();
  //sound2();
}

void loop() {
  sing();
  sing2();
  //sound();
   //sound2();
}






void sing()
{
  //int len = sizeof(underworld_melody);
  for (int i = 0; i < 166; i++)
  {
    float noteDuration = 1000 / Guile_tempo[i];
    tone(buzzer, Guile_themeMusic[i], noteDuration);
    float pauseBetweenNotes = noteDuration * 1.30;
    /*Serial.print(i);
    Serial.print(" + ");
    Serial.println(Guile_tempo[i]);*/
    delay(pauseBetweenNotes);
    
    tone(buzzer, 0, noteDuration); //stop the tone playing
  }
}
void sing2()
{
  
  for (int i = 0; i < 157; i++)
  {
    int noteDuration = 1000 / mortalkombattheme_tempo[i];

    tone(buzzer, mortalkombattheme[i], noteDuration);

    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);

    tone(buzzer, 0, noteDuration); //stop the tone playing
  }
}
void sound()
{
  
  for (int i = 0; i < 3; i++)
  {
    int noteDuration = 1000 / wrongbuzzer_tempo[i];
    tone(buzzer, wrongbuzzer[i], noteDuration);

    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);

    tone(buzzer, 0, noteDuration); //stop the tone playing
  }
}
void sound2()
{
  
  for (int i = 0; i < 3; i++)
  {
    int noteDuration = 1000 / rightbuzzer_tempo[i];
    tone(buzzer, rightbuzzer[i], noteDuration);

    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);

    tone(buzzer, 0, noteDuration); //stop the tone playing
  }
}
